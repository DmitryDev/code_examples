<?php

/*
 * @file
 * This is the main code file for the Agm module.
 */


/**
 * Implementation of hook_preprocess
 */
function agm_preprocess(&$vars) {
  drupal_add_js(drupal_get_path('module', 'agm') . '/js/agm.js');
  if(arg(0) == 'node'){
    drupal_add_css(path_to_theme() . '/node_page.css');
  }
}

/**
 * Implementation of hook_menu()
 */
function agm_menu(){
  $items = array();
  $items['home'] = array(
    'page callback' => 'agm_home_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ajax'] = array(
    'page callback' => 'agm_ajax_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['about'] = array(
    'page callback' => 'agm_about_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block()
 */
function agm_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $blocks[66] = array('info' => t('Left Side Menu'), 'enabled' => 1,);
      $blocks[67] = array('info' => t('ARCHIVES'), 'enabled' => 1,);
      $blocks[68] = array('info' => t('CATEGORIES'), 'enabled' => 1,);
      return $blocks;
      break;
    case 'view':
      switch($delta) {
        case 66:
          $block = array('content' => agm_menu_block());
          break;
        case 67:
          $block = array('content' => agm_archives_block());
          break;
	case 68:
          $block = array('content' => agm_categories_block());
          break;	  
      }
      return $block;
      break;
  }
}

/**
 * Implementation of hook_theme()
 */
function agm_theme() {
  return array(
    'news_new' => array(
      'template' => 'news_view',
      'arguments' => array('content' => null,),
    ),
  );
}

/**
 * Menu callback
 */
function agm_home_callback(){
  return theme('box', '');  // did say Please Wait... 
}

/**
 * Menu callback
 */
function agm_about_callback(){
  return theme('box', '');  // did say Please wait...
}

/**
 * Menu callback
 */
function agm_ajax_callback(){
  switch($_POST['js']){
    case 'home':
      $result = db_fetch_object(db_query("SELECT n.nid FROM {node} n WHERE n.type = 'homepage_image' ORDER BY RAND() LIMIT 1"));
      $node = node_load($result->nid);
      $size = getimagesize($node->field_home_image['0']['filepath']);
      print drupal_to_js(array(
        'path' => $node->field_home_image['0']['filepath'],
        'field_home_x' => _agm_prepare_to_ajax($node->field_home_x),
        'field_home_y' => _agm_prepare_to_ajax($node->field_home_y),
        'field_home_text' => _agm_prepare_to_ajax($node->field_home_text),
        'field_home_node_reference' => _agm_prepare_to_ajax($node->field_home_node_reference),
        'title' => $node->title,
        'image_x' => $size['0'],
        'image_y' => $size['1'],
      ));
      exit();
      break;
    case 'node':

      $nid = $_POST['nid'];
      $im_id = $_POST['im_id'];
      $flag = $_POST['flag'];

      $array = array();
      $array = getImages($nid, $im_id, $flag);
      print json_encode($array);
      
      exit();
      break;
    case 'about':
      $mdata = array();
      $node = node_load(9);
      $size = getimagesize($node->field_about_bg_image['0']['filepath']);
      $i=0;
      for($i=0;$i<sizeof($node->field_bio_block_name);$i++){
        $mdata[] = $node->field_bio_block_name[$i]['value']. '<split-mi>' . $node->field_bio_block_text[$i]['value'];
      }

      print drupal_to_js(array(
        'mdata' => implode('<split-ma>', $mdata),
        'title' => $node->title,
        'body' => $node->body,
        'path' =>  $node->field_about_bg_image['0']['filepath'],
        'image_x' => $size['0'],
        'image_y' => $size['1'],
      ));
      exit();
      break;
    default: drupal_access_denied();
  }
}

/**
 * Function to get images
 * @param  int $nid
 * @param  int $im_id
 * @param  boolean $flag
 * @return array
 */
function getImages($nid, $im_id, $flag = null){

  $array = Array();
  $result = Array();

  $node = node_load($nid);

  $next_nid = agm_next_node($node->nid, true);
  $prev_nid = agm_next_node($node->nid, false);

  $nnode = node_load($next_nid);
  $pnode = node_load($prev_nid);

  if(count($pnode->field_project_images)< 3){
    $pp_nid = agm_next_node($pnode->nid, false);
    $pp_pnode = node_load($pp_nid);
    $array = addInArray($array, $pp_pnode->field_project_images, $pp_nid, $pp_pnode->title, $pp_pnode->body);
  }
  $array = addInArray($array, $pnode->field_project_images, $prev_nid, $pnode->title, $pnode->body);
  $array = addInArray($array, $node->field_project_images, $node->nid, $node->title, $node->body);
  if(count($nnode->field_project_images)< 3){
    $nn_nid = agm_next_node($nnode->nid, true);
    $nn_node = node_load($nn_nid);
    $array = addInArray($array, $nn_node->field_project_images, $nn_nid, $nn_node->title, $nn_node->body);
  }
  $array = addInArray($array, $nnode->field_project_images, $next_nid, $nnode->title, $nnode->body);

  reset($array);

  while($c = next($array)){
    if($c['nid'] == $nid && $c['im_id'] == $im_id){
      $position = key($array);
    }
  }

  if( gettype($flag) == 'boolean'){
    $position = $flag ? ++$position : --$position;
  }

  for($i = -2; $i < 3; $i++){
    $result[] = $array[$position + $i];
  }

  return $result;
}

/**
 * Association arrays
 * @param  array $array
 * @param  array $m
 * @param  int $nid
 * @param  string $title
 * @return array
 */
function addInArray($array, $m, $nid, $title, $body){
  foreach($m as $key => $row){
    $size = getimagesize($row['filepath']);
    $array[] = array(
      'nid' => $nid,
      'title' => $title,
      'body' => $body,
      'im_id' => $key,
      'filepath' => $row['filepath'],
      'description' => $row['data']['description'],
      'x' => $size['0'],
      'y' => $size['1'],
    );
  }
  return $array;
}
/**
 * Function returns html (left side menu)
 * @return html
 */
function agm_menu_block(){
  $tax = agm_get_taxonomy_terms('1');
  $output = '<div class="agm-left-side-menu">';
  foreach($tax as $row){
    $nodes = agm_get_nodes($row->tid);
    $output .= "<div class='agm-left-side-menu-group agm-menu-not-active'>";
    $output .= '<div class="agm-left-side-menu-title side-menu-tax-id-' . $row->tid . '">';
    $output .= $row->name;
    $output .= '</div>';
    $output .= "<div class='agm-left-side-menu-links'>";
    $output .= theme('item_list', agm_create_menu_links($nodes));
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Function returns "Categoies" block html
 * @return html
 */
function agm_categories_block(){
  $terms = agm_get_taxonomy_terms(2);
  $links = array();
  foreach($terms as $row){
    $links[] = l($row->name, 'news/' . $row->tid);  
  }
  return theme('item_list', $links);
}

/**
 * Function returns "Archives" block html
 * @return html
 */
function agm_archives_block(){

  $date  = explode(',',format_date(time(), 'custom', 'Y,n'));
  $link = array();
  
  for($it = 1; $it < 4; $it ++){
    $date_next  = explode(',', format_date(mktime (0,0,0, $date['1'] - $it, 10, $date['0']) , 'custom', 'Y,n'));
    $link[] = l(format_date(mktime (0,0,0, $date['1'] - $it, 10, $date['0']), 'custom', 'F Y'), 'news/' . $date_next['0'] . '/' . $date_next['1']);
  }
  return theme('item_list', $link);
}

/**
 * Function to get taxonomy terms
 * @param  int $vid
 * @return array
 */
function agm_get_taxonomy_terms($vid){
  $return = array();
  $result = db_query("SELECT t.tid as tid, t.name as name, t.description as description, t.weight as weight FROM {term_data} t WHERE vid = %d ORDER BY weight", $vid);
  while($result_row = db_fetch_object($result)){
    $return[$result_row->tid] = $result_row;
  }
  return $return;
}

/**
 * Function to get nodes nid and title by taxonomy term
 * @param  int $tid
 * @return array
 */
function agm_get_nodes($tid){
  $view = views_get_view('architects_taxonomy_node');
  $view->set_display('default');
  $view->set_arguments(array($tid));
  $view->pre_execute();
  $view->execute('default');
  block_block();
  return $view->result;
}

/**
 * Function to create menu links
 * @param  array $nodes
 * @return array
 */
function  agm_create_menu_links($nodes){
  $links = array();
  foreach($nodes as $row){
    $node = node_load($row->nid);
    $links[] = l($node->title, 'node/' . $node->nid);
  }
  return $links;
}

/**
 * Function to prepare data
 * @param  $data
 * @return string
 */
function _agm_prepare_to_ajax($data){
  $date_prepare = array();
  foreach($data as $row){
    foreach($row as $item){
      $date_prepare[] = $item;
    }
  }
  
  return implode(';', $date_prepare);
}

/**
 * Function to get next/prev node id, flag == true -> next node, else prev node
 * @param  int $nid
 * @param  boolean $flag
 * @return 
 */
function agm_next_node($nid, $flag){
  $node = node_load($nid);
  $tax = taxonomy_node_get_terms($node);

  foreach($tax as $row){
    $tid =  $row->tid;
  }

  $array = agm_get_taxonomy_nodes($tid);

  if($array[$nid]->weight == 1 && !$flag){
    $next_nid = agm_get_next_nid($tid, $flag);
  }elseif($array[$nid]->weight == count($array) && $flag){
    $next_nid = agm_get_next_nid($tid, $flag);
  }else{
    $next_nid = agm_get_next_item_in_array($array, $array[$nid]->weight, $flag);
  }

  return $next_nid;
}

/**
 * Function to get a list of nodes by their taxonomy id
 * @param  int $tid
 * @return array
 */
function agm_get_taxonomy_nodes($tid){
  $result = db_query("
      SELECT node.nid AS nid, node.title AS node_title
      FROM node node
      INNER JOIN term_node term_node ON node.vid = term_node.vid
      WHERE node.status <> 0
      AND term_node.tid = %n", $tid);

  $array = array();
  $iter = 0;
  while($pointer = db_fetch_object($result)){
    $array[$pointer->nid] = $pointer;
    $array[$pointer->nid]->weight = ++$iter;
  }
  return $array;
}

/**
 * Function to get next/prev item in array
 * @param  array $array
 * @param  int $weight
 * @param  boolean $flag
 * @return int
 */
function agm_get_next_item_in_array($array, $weight, $flag){

  foreach($array as $row){
    if($flag && $row->weight == $weight + 1){
      return $row->nid;
    }
    if(!$flag && $row->weight == $weight - 1){
      return $row->nid;
    }
  }
}

/**
 * Function to get next node id
 * @param  int $tid
 * @param  boolean $flag
 * @return int
 */
function agm_get_next_nid($tid, $flag){

  $array = array();
  $tree = taxonomy_get_tree(1);

  if($flag){
    $next_term = ($tid + 1) <= (count($tree)) ? $tid + 1 : 1;
    $array =  agm_get_taxonomy_nodes($next_term);
    foreach($array as $key => $row){
      $next_nid =  $key;
      break;
    } 
  }else{
    $next_term = ($tid - 1) >= 1 ? $tid - 1 : count($tree);
    $array =  agm_get_taxonomy_nodes($next_term);
    foreach($array as $key => $row){
      $next_nid =  $key;
    }
  }
  return $next_nid;
}
